<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="recipe">
    <resultMap id="like" type="org.ks.recipe.vo.Like">
        <result column="recipe_no" property="recipeNo"/>
        <result column="id" property="id"/>
    </resultMap>
    <resultMap id="step" type="org.ks.recipe.vo.Step">
        <result column="step_content" property="step"/>
        <result column="step_img" property="img"/>
    </resultMap>
    <resultMap id="recipe" type="org.ks.recipe.vo.Recipe">
        <result column="recipe_no" property="recipeNo"/>
        <result column="recipe_title" property="recipeTitle"/>
        <result column="recipe_writer" property="recipeWriter"/>
        <result column="recipe_contents" property="recipeContents"/>
        <result column="recipe_mainimg" property="recipeMainImg"/>
        <result column="recipe_cat1" property="recipeCat1"/>
        <result column="recipe_cat2" property="recipeCat2"/>
        <result column="recipe_count" property="recipeCount"/>
        <result column="recipe_time" property="recipeTime"/>
        <result column="recipe_level" property="recipeLevel"/>
        <result column="recipe_item" property="recipeItem"/>
        <result column="recipe_like" property="recipeLike"/>
        <result column="recipe_hit" property="recipeHit"/>
        <result column="recipe_price" property="recipePrice"/>
        <result column="recipe_date" property="recipeDate"/>
        <result column="recipe_stock" property="recipeStock"/>
        <result column="recipe_video" property="recipeVideo"/>
        <result column="recipe_state" property="recipeState"/>
        <collection property="recipeStep" column="recipe_no" javaType="java.util.ArrayList" ofType="org.ks.recipe.vo.Step" select="getStep">
            <result property="step" column="step_content"/>
            <result property="img" column="step_img"/>
        </collection>
        <collection property="recipeWorkImg" column="recipe_no" javaType="java.util.ArrayList" ofType="string" select="getWorkImg">
            <result column="work_img"/>
        </collection>
    </resultMap>

    <resultMap id="member" type="org.ks.member.vo.Member">
        <result column="id" property="id"/>
        <result column="pw" property="pw"/>
        <result column="name" property="name"/>
        <result column="nickname" property="nickname"/>
        <result column="gender" property="gender"/>
        <result column="addr1" property="addr1"/>
        <result column="addr2" property="addr2"/>
        <result column="phone" property="phone"/>
        <result column="member_img" property="memberImg"/>
        <result column="zip_code" property="zipCode"/>
    </resultMap>

    <resultMap id="recipeDetail" type="org.ks.recipe.vo.RecipeDetail">
        <result property="category1" column="category1"/>
        <result property="category2" column="category2"/>
        <association property="member" resultMap="member"/>
        <association property="recipe" resultMap="recipe"/>
    </resultMap>

    <select id="categoryAll" resultType="category">
        select
            CATEGORY_NO as categoryNo,
            CATEGORY_TYPE as categoryType,
            CATEGORY_NAME as categoryName
        from CATEGORY
    </select>

    <insert id="recipeReg" parameterType="recipe"><![CDATA[
        insert into RECIPE
        values (
                SEQ_RECIPE_NO.nextval,
                #{recipeTitle},
                #{recipeWriter},
                #{recipeContents},
                #{recipeMainImg},
                #{recipeCat1},
                #{recipeCat2},
                #{recipeCount},
                #{recipeTime},
                #{recipeLevel},
                #{recipeItem},
                #{recipeLike},
                #{recipeHit},
                #{recipePrice},
                sysdate,
                #{recipeStock},
                #{recipeVideo},
                #{recipeState})
    ]]></insert>

    <select id="getStep" resultMap="step">
        select STEP_CONTENT, STEP_IMG from STEP where recipe_no = #{recipe_no}
    </select>
    <select id="getWorkImg" resultType="string">
        select work_img from WORK_IMG where recipe_no = #{recipe_no}
    </select>

    <update id="stepReg" parameterType="recipe">
        <foreach collection="recipeStep" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"><![CDATA[
            INTO step(recipe_no, step_no, step_content, step_img) VALUES(SEQ_RECIPE_NO.currval, #{index}+1, #{item.step}, #{item.img})
        ]]></foreach>
    </update>
    <update id="workImgReg" parameterType="recipe" >
        <foreach collection="recipeWorkImg" item="item" index="index" separator=" " open="INSERT ALL" close="SELECT * FROM DUAL"><![CDATA[
            INTO work_img VALUES(SEQ_RECIPE_NO.currval, #{index}+1, #{item})
        ]]></foreach>
    </update>
    <select id="recipeAll" resultMap="recipe">
        select * from RECIPE
    </select>
    <select id="recipeDetail" parameterType="_int" resultMap="recipeDetail">
        select RECIPE_NO,
               RECIPE_TITLE,
               RECIPE_WRITER,
               RECIPE_CONTENTS,
               RECIPE_MAINIMG,
               RECIPE_CAT1,
               RECIPE_CAT2,
               RECIPE_COUNT,
               RECIPE_TIME,
               RECIPE_LEVEL,
               RECIPE_ITEM,
               (select count(*) from RECIPE_LIKE where RECIPE.RECIPE_NO=RECIPE_LIKE.RECIPE_NO)as RECIPE_LIKE,
               RECIPE_HIT,
               RECIPE_PRICE,
               RECIPE_DATE,
               RECIPE_STOCK,
               RECIPE_VIDEO,
               RECIPE_STATE,
               ID,
               PW,
               NAME,
               NICKNAME,
               GENDER,
               ADDR1,
               ADDR2,
               PHONE,
               MEMBER_IMG,
               ZIP_CODE,
               (select CATEGORY_NAME from CATEGORY where RECIPE_CAT1=CATEGORY_NO)as category1,
               (select CATEGORY_NAME from CATEGORY where RECIPE_CAT2=CATEGORY_NO)as category2
        from RECIPE
                 join MEMBER
                      on RECIPE.RECIPE_WRITER = MEMBER.ID
        where RECIPE_NO = #{recipeNo}
    </select>
    <update id="recipeHit" parameterType="int">
        update RECIPE set RECIPE_HIT = RECIPE_HIT+1 where RECIPE_NO=#{recipeNo}
    </update>

    <update id="recipeLike" parameterType="org.ks.recipe.vo.Like" ><![CDATA[
        MERGE into RECIPE_LIKE
        using dual
        on (RECIPE_LIKE.RECIPE_NO = #{recipeNo} and RECIPE_LIKE.id = #{id})
        when not matched then
            insert (recipe_like.recipe_no,recipe_like.id)
            values(#{recipeNo},#{id})
        ]]></update>
    <update id="updateLike" parameterType="_int">
        update RECIPE set RECIPE_LIKE = (select count(*) from RECIPE_LIKE where RECIPE_LIKE.RECIPE_NO = #{recipeNo}) where RECIPE_NO=#{recipeNo}
    </update>
    <update id="recipeUnLike" parameterType="org.ks.recipe.vo.Like">
        delete RECIPE_LIKE where RECIPE_NO = #{recipeNo} and ID = #{id}
    </update>

    <select id="getLike" parameterType="org.ks.recipe.vo.Like" resultMap="like">
        select * from RECIPE_LIKE where RECIPE_NO = #{recipeNo} and id = #{id}
    </select>

    <select id="likeRank" resultMap="recipe">
        select ROWNUM, rank.* from (select * from RECIPE where RECIPE_PRICE = 0 and RECIPE_STATE = 1 order by RECIPE_LIKE desc) rank where ROWNUM between 1 and 10
    </select>

    <select id="search" parameterType="org.ks.recipe.vo.RecipeSearch" resultMap="recipe">
        select B.*
        from (
            select ROWNUM as rnum, A.*
            from (
                select * from RECIPE where RECIPE_STATE = 1
                <if test="q != null and q != ''">
                    and (recipe_title like '%'||#{q}||'%' or recipe_contents like '%'||#{q}||'%')
                </if>
                <if test="cat1 != null and cat1 != ''">
                    and recipe_cat1 = #{cat1}
                </if>
                <if test="cat2 != null and cat2 != ''">
                    and recipe_cat2 = #{cat2}
                </if>
                <if test="id != null and id != ''">
                    and recipe_writer = #{id}
                </if>
                <if test="order == 'reco'">
                    order by recipe_like desc
                </if>
                <if test="order == 'date'">
                    order by recipe_date desc
                </if>

        <![CDATA[
            ) A
        where ROWNUM <= (#{page}*16)
        ) B
        where B.rnum >= ((#{page}-1)*16 + 1)
    ]]>
    </select>

    <select id="total" parameterType="org.ks.recipe.vo.RecipeSearch" resultType="_int">
        select count(*) from RECIPE where RECIPE_STATE = 1
        <if test="q != null and q != ''">
            and (recipe_title like '%'||#{q}||'%' or recipe_contents like '%'||#{q}||'%')
        </if>
        <if test="cat1 != null and cat1 != ''">
            and recipe_cat1 = #{cat1}
        </if>
        <if test="cat2 != null and cat2 != ''">
            and recipe_cat2 = #{cat2}
        </if>
        <if test="id != null and id != ''">
            and recipe_writer = #{id}
        </if>
    </select>

    <update id="orderReg" parameterType="map">
        update RECIPE set RECIPE_PRICE = #{price} where RECIPE_NO = #{recipeNo}
    </update>

    <update id="delete" parameterType="recipe">
        update RECIPE set RECIPE_STATE = #{recipeState} where recipe_no = #{recipeNo}
    </update>

    <update id="update" parameterType="recipe"><![CDATA[
        update RECIPE
        set
            RECIPE_TITLE = #{recipeTitle},
            recipe_contents = #{recipeContents},
            recipe_mainimg = #{recipeMainImg},
            recipe_cat1 = #{recipeCat1},
            recipe_cat2 = #{recipeCat2},
            recipe_count = #{recipeCount},
            recipe_time = #{recipeTime},
            recipe_level = #{recipeLevel},
            recipe_item = #{recipeItem},
            recipe_video = #{recipeVideo},
            recipe_state = #{recipeState}
            where recipe_no = #{recipeNo}
    ]]></update>
    <update id="stepUpdate" parameterType="map">
        MERGE into STEP S
        using dual
        on (S.RECIPE_NO = #{recipeNo} and S.step_no = #{stepNo})
            when matched then
                update set S.step_content = #{stepContent}, S.step_img = #{stepImg}
        when not matched then
            insert
            values(#{recipeNo},#{stepNo},#{stepContent},#{stepImg})
    </update>
    <update id="workImgUpdate" parameterType="map">
        MERGE into WORK_IMG W
        using dual
        on (W.RECIPE_NO = #{recipeNo} and W.WORK_IMG_NO = #{workImgNo})
        when matched then
            update set W.WORK_IMG = #{workImg}
        when not matched then
            insert
            values(#{recipeNo},#{workImgNo},#{workImg})
    </update>

    <select id="stepCount" parameterType="_int" resultType="int">
        select count(*) from STEP where RECIPE_NO = #{recipeNo}
    </select>
    <update id="stepDel" parameterType="map">
        delete STEP where RECIPE_NO = #{recipeNo} and (STEP_NO between #{start} and #{end})
    </update>
    <select id="workImgCount" parameterType="_int" resultType="int">
        select count(*) from WORK_IMG where RECIPE_NO = #{recipeNo}
    </select>
    <update id="workImgDel" parameterType="map">
        delete WORK_IMG where RECIPE_NO = #{recipeNo} and (WORK_IMG_NO between #{start} and #{end})
    </update>

    <select id="getStepImg" parameterType="map" resultType="string">
        select STEP_IMG from STEP where RECIPE_NO = #{recipeNo} and (STEP_NO between #{start} and #{end})
    </select>

    <select id="getWorkImgImg" parameterType="map" resultType="string">
        select WORK_IMG from WORK_IMG where RECIPE_NO = #{recipeNo} and (WORK_IMG_NO between #{start} and #{end})
    </select>

    <select id="getProduct" resultMap="recipe"><![CDATA[
        select *
        from RECIPE where RECIPE_PRICE > 0
    ]]></select>
</mapper>
